/* Ids Layout Grid */
@import '../../themes/mixins/ids-core-mixins';

:host {
  --grid-auto-row-height: 0;
  --grid-fill-color: var(--ids-layout-grid-color-background);
  --grid-text-color: var(--ids-layout-grid-color-text);
  --min-col-width: 0;
  --max-col-width: 1fr;
  --min-row-height: 0;
  --min-row-width: 1fr;
  --sticky-position: 0;
}

$prefix: 'ids-layout-grid';
$spacing-unit: 8px;
$grid-cols: 24;
$grid-rows: 50;
$grid-gap-sm: $spacing-unit;
$grid-gap: $spacing-unit * 2;
$grid-gap-md: $spacing-unit * 3;
$grid-gap-lg: $spacing-unit * 4;
$grid-gap-xl: $spacing-unit * 5;
$grid-margin-xs: $spacing-unit;
$grid-margin-sm: $spacing-unit * 2;
$grid-margin-md: $spacing-unit * 3;
$grid-margin-lg: $spacing-unit * 4;
$grid-margin-xl: $spacing-unit * 5;
$grid-padding-xxs: calc($spacing-unit / 2);
$grid-padding-xs: $spacing-unit;
$grid-padding-sm: $spacing-unit * 2;
$grid-padding-md: $spacing-unit * 3;
$grid-padding-lg: $spacing-unit * 4;
$grid-padding-xl: $spacing-unit * 5;
$min-col-width: var(--min-col-width);
$max-col-width: var(--max-col-width);
$min-row-height: var(--min-row-height);
$max-row-height: var(--max-row-height);
$max-width: var(--max-width);

:host(.#{$prefix}),
.#{$prefix} {
  display: grid;
  grid-gap: $grid-gap;
  justify-content: start;
  box-sizing: border-box;
}

:host([gap='none']),
.#{$prefix}.#{$prefix}-gap-none {
  grid-gap: 0;
}

:host([gap='sm']),
.#{$prefix}.#{$prefix}-gap-sm {
  grid-gap: $grid-gap-sm;
}

:host([gap='md']),
.#{$prefix}.#{$prefix}-gap-md {
  grid-gap: $grid-gap-md;
}

:host([gap='lg']),
.#{$prefix}.#{$prefix}-gap-lg {
  grid-gap: $grid-gap-lg;
}

:host([gap='xl']),
.#{$prefix}.#{$prefix}-gap-xl {
  grid-gap: $grid-gap-xl;
}

:host([margin='xs']),
.#{$prefix}.#{$prefix}-margin-xs {
  margin: $grid-margin-xs;
}

:host([margin='sm']),
.#{$prefix}.#{$prefix}-margin-sm {
  margin: $grid-margin-sm;
}

:host([margin='md']),
.#{$prefix}.#{$prefix}-margin-md {
  margin: $grid-margin-md;
}

:host([margin='lg']),
.#{$prefix}.#{$prefix}-margin-lg {
  margin: $grid-margin-lg;
}

:host([margin='xl']),
.#{$prefix}.#{$prefix}-margin-xl {
  margin: $grid-margin-xl;
}

:host([margin='auto']),
.#{$prefix}.#{$prefix}-margin-auto {
  margin: auto;
}

:host([margin-y='xs']),
.#{$prefix}.#{$prefix}-margin-y-xs {
  margin-block: $grid-margin-xs;
}

:host([margin-y='sm']),
.#{$prefix}.#{$prefix}-margin-y-sm {
  margin-block: $grid-margin-sm;
}

:host([margin-y='md']),
.#{$prefix}.#{$prefix}-margin-y-md {
  margin-block: $grid-margin-md;
}

:host([margin-y='lg']),
.#{$prefix}.#{$prefix}-margin-y-lg {
  margin-block: $grid-margin-lg;
}

:host([margin-y='xl']),
.#{$prefix}.#{$prefix}-margin-y-xl {
  margin-block: $grid-margin-xl;
}

:host([max-width='xs']),
.#{$prefix}.#{$prefix}-max-width-xs {
  max-width: $breakpoint-xs;
}

:host([max-width='sm']),
.#{$prefix}.#{$prefix}-max-width-sm {
  max-width: $breakpoint-sm;
}

:host([max-width='md']),
.#{$prefix}.#{$prefix}-max-width-md {
  max-width: $breakpoint-md;
}

:host([max-width='lg']),
.#{$prefix}.#{$prefix}-max-width-lg {
  max-width: $breakpoint-lg;
}

:host([max-width='xl']),
.#{$prefix}.#{$prefix}-max-width-xl {
  max-width: $breakpoint-xl;
}

:host([max-width='xxl']),
.#{$prefix}.#{$prefix}-max-width-xxl {
  max-width: $breakpoint-xxl;
}

:host([max-width$='px']) {
  max-width: var(--max-width);
}

:host([padding='xs']),
::slotted([padding='xs']),
.#{$prefix}.#{$prefix}-padding-xs {
  padding: $grid-padding-xs;
}

:host([padding='sm']),
::slotted([padding='sm']),
.#{$prefix}.#{$prefix}-padding-sm {
  padding: $grid-padding-sm;
}

:host([padding='md']),
::slotted([padding='md']),
.#{$prefix}.#{$prefix}-padding-md {
  padding: $grid-padding-md;
}

:host([padding='lg']),
::slotted([padding='lg']),
.#{$prefix}.#{$prefix}-padding-lg {
  padding: $grid-padding-lg;
}

:host([padding='xl']),
::slotted([padding='xl']),
.#{$prefix}.#{$prefix}-padding-xl {
  padding: $grid-padding-xl;
}

:host([padding-x='xs']),
.#{$prefix}.#{$prefix}-padding-x-xs {
  padding-inline: $grid-padding-xs;
}

:host([padding-x='sm']),
.#{$prefix}.#{$prefix}-padding-x-sm {
  padding-inline: $grid-padding-sm;
}

:host([padding-x='md']),
.#{$prefix}.#{$prefix}-padding-x-md {
  padding-inline: $grid-padding-md;
}

:host([padding-x='lg']),
.#{$prefix}.#{$prefix}-padding-x-lg {
  padding-inline: $grid-padding-lg;
}

:host([padding-x='xl']),
.#{$prefix}.#{$prefix}-padding-x-xl {
  padding-inline: $grid-padding-xl;
}

:host([padding-y='xs']),
.#{$prefix}.#{$prefix}-padding-y-xs {
  padding-block: $grid-padding-xs;
}

:host([padding-y='xxs']),
.#{$prefix}.#{$prefix}-padding-y-xxs {
  padding-block: $grid-padding-xxs;
}

:host([padding-y='sm']),
.#{$prefix}.#{$prefix}-padding-y-sm {
  padding-block: $grid-padding-sm;
}

:host([padding-y='md']),
.#{$prefix}.#{$prefix}-padding-y-md {
  padding-block: $grid-padding-md;
}

:host([padding-y='lg']),
.#{$prefix}.#{$prefix}-padding-y-lg {
  padding-block: $grid-padding-lg;
}

:host([padding-y='xl']),
.#{$prefix}.#{$prefix}-padding-y-xl {
  padding-block: $grid-padding-xl;
}

/* Grid - Auto Fit/Fill */
:host([auto-fit]),
.#{$prefix}-auto-fit {
  width: 100%;
  grid-template-columns: repeat(auto-fit, minmax($min-col-width, $max-col-width));
}

:host([auto-fill]),
.#{$prefix}-auto-fill {
  width: 100%;
  grid-template-columns: repeat(auto-fill, minmax($min-col-width, $max-col-width));
}

/* TODO - Add settings for grid-auto-columns */
:host(.#{$prefix}-cols-auto),
.#{$prefix}-cols-auto {
  grid-auto-columns: auto;
}

:host(.#{$prefix}-cols-min),
.#{$prefix}-cols-min	{
  grid-auto-columns: min-content;
}

:host(.#{$prefix}-cols-max),
.#{$prefix}-cols-max {
  grid-auto-columns: max-content;
}

:host(.#{$prefix}-cols-fr),
.#{$prefix}-cols-fr {
  grid-auto-columns: minmax(0, 1fr);
}

:host([flow='row']),
.#{$prefix}-flow-row {
  grid-auto-flow: row;
}

:host([flow='column']),
.#{$prefix}-flow-col {
  grid-auto-flow: column;
}

:host([flow='dense']),
.#{$prefix}-flow-dense {
  grid-auto-flow: dense;
}

:host([flow='row-dense']),
.#{$prefix}-flow-row-dense {
  grid-auto-flow: row dense;
}

:host([flow='column-dense']),
.#{$prefix}-flow-col-dense {
  grid-auto-flow: column dense;
}

@media (min-width: $breakpoint-xs) {
  :host([flow-xs="row"]),
  .#{$prefix}-flow-row {
    grid-auto-flow: row;
  }

  :host([flow-xs="column"]),
  .#{$prefix}-flow-col {
    grid-auto-flow: column;
  }

  :host([flow-xs="dense"]),
  .#{$prefix}-flow-dense {
    grid-auto-flow: dense;
  }

  :host([flow-xs="row-dense"]),
  .#{$prefix}-flow-row-dense {
    grid-auto-flow: row dense;
  }

  :host([flow-xs="column-dense"]),
  .#{$prefix}-flow-col-dense {
    grid-auto-flow: column dense;
  }
}

@media (min-width: $breakpoint-sm) {
  :host([flow-sm="row"]),
  .#{$prefix}-flow-row {
    grid-auto-flow: row;
  }

  :host([flow-sm="column"]),
  .#{$prefix}-flow-col {
    grid-auto-flow: column;
  }

  :host([flow-sm="dense"]),
  .#{$prefix}-flow-dense {
    grid-auto-flow: dense;
  }

  :host([flow-sm="row-dense"]),
  .#{$prefix}-flow-row-dense {
    grid-auto-flow: row dense;
  }

  :host([flow-sm="column-dense"]),
  .#{$prefix}-flow-col-dense {
    grid-auto-flow: column dense;
  }
}

@media (min-width: $breakpoint-md) {
  :host([flow-md="row"]),
  .#{$prefix}-flow-row {
    grid-auto-flow: row;
  }

  :host([flow-md="column"]),
  .#{$prefix}-flow-col {
    grid-auto-flow: column;
  }

  :host([flow-md="dense"]),
  .#{$prefix}-flow-dense {
    grid-auto-flow: dense;
  }

  :host([flow-md="row-dense"]),
  .#{$prefix}-flow-row-dense {
    grid-auto-flow: row dense;
  }

  :host([flow-md="column-dense"]),
  .#{$prefix}-flow-col-dense {
    grid-auto-flow: column dense;
  }
}

@media (min-width: $breakpoint-lg) {
  :host([flow-lg="row"]),
  .#{$prefix}-flow-row {
    grid-auto-flow: row;
  }

  :host([flow-lg="column"]),
  .#{$prefix}-flow-col {
    grid-auto-flow: column;
  }

  :host([flow-lg="dense"]),
  .#{$prefix}-flow-dense {
    grid-auto-flow: dense;
  }

  :host([flow-lg="row-dense"]),
  .#{$prefix}-flow-row-dense {
    grid-auto-flow: row dense;
  }

  :host([flow-lg="column-dense"]),
  .#{$prefix}-flow-col-dense {
    grid-auto-flow: column dense;
  }
}

@media (min-width: $breakpoint-xl) {
  :host([flow-xl="row"]),
  .#{$prefix}-flow-row {
    grid-auto-flow: row;
  }

  :host([flow-xl="column"]),
  .#{$prefix}-flow-col {
    grid-auto-flow: column;
  }

  :host([flow-xl="dense"]),
  .#{$prefix}-flow-dense {
    grid-auto-flow: dense;
  }

  :host([flow-xl="row-dense"]),
  .#{$prefix}-flow-row-dense {
    grid-auto-flow: row dense;
  }

  :host([flow-xl="column-dense"]),
  .#{$prefix}-flow-col-dense {
    grid-auto-flow: column dense;
  }
}

@media (min-width: $breakpoint-xxl) {
  :host([flow-xxl="row"]),
  .#{$prefix}-flow-row {
    grid-auto-flow: row;
  }

  :host([flow-xxl="column"]),
  .#{$prefix}-flow-col {
    grid-auto-flow: column;
  }

  :host([flow-xxl="dense"]),
  .#{$prefix}-flow-dense {
    grid-auto-flow: dense;
  }

  :host([flow-xxl="row-dense"]),
  .#{$prefix}-flow-row-dense {
    grid-auto-flow: row dense;
  }

  :host([flow-xxl="column-dense"]),
  .#{$prefix}-flow-col-dense {
    grid-auto-flow: column dense;
  }
}

/* TODO - Add settings for grid-auto-rows */
:host(.#{$prefix}-auto-rows-auto),
.#{$prefix}-auto-rows-auto {
  grid-auto-rows: auto;
}

:host(.#{$prefix}-auto-rows-min),
.#{$prefix}-auto-rows-min {
  grid-auto-rows: min-content;
}

:host(.#{$prefix}-auto-rows-max),
.#{$prefix}-auto-rows-max {
  grid-auto-rows: max-content;
}

:host(.#{$prefix}-auto-rows-fr),
.#{$prefix}-auto-rows-fr {
  grid-auto-rows: minmax(0, 1fr);
}

:host([row-height]),
.#{$prefix}-auto-row-height {
  grid-auto-rows: var(--grid-auto-row-height);
}

/** Align items */
$align-items-list: start end center stretch;

@each $align-items in $align-items-list {
  :host([align-items='#{$align-items}']) {
    align-items: $align-items;
  }
}

/** Align items */
$align-items-list: start end center stretch;

@each $align-items in $align-items-list {
  :host([align-items='#{$align-items}']) {
    align-items: $align-items;
  }
}

/* Justify content */
$align-content-list: start center space-between space-around space-evenly end;

@each $align-content in $align-content-list {
  :host([justify-content='#{$align-content}']),
  .#{$prefix}-justify-#{$align-content} {
    justify-content: $align-content;
  }

  :host([align-content='#{$align-content}']),
  .#{$prefix}-align-#{$align-content} {
    align-content: $align-content;
  }

  ::slotted([justify-content='#{$align-content}']) {
    display: grid;
    justify-content: $align-content;
  }

  ::slotted([align-content='#{$align-content}']) {
    display: grid;
    align-content: $align-content;
  }
}

::slotted([col-span='all']),
.#{$prefix} > .#{$prefix}-col-span-all {
  grid-column: 1 / -1;
}

::slotted([row-span='all']),
.#{$prefix} > .#{$prefix}-row-span-all {
  grid-row: 1 / -1;
}

::slotted([sticky]),
.#{$prefix} > .#{$prefix}-sticky {
  position: sticky;
  top: var(--sticky-position);
}

/* Grid Columms - Base */
@for $i from 1 through $grid-cols {
  :host([cols='#{$i}']),
  .#{$prefix}-cols-#{$i} {
    width: 100%;
    grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
  }

  :host(.#{$prefix}) > ::slotted([col-span='#{$i}']),
  .#{$prefix} > .#{$prefix}-col-span-#{$i} {
    grid-column: span $i / span $i;
  }

  :host(.#{$prefix}) > ::slotted([col-start='#{$i}']),
  .#{$prefix} > .#{$prefix}-col-start-#{$i} {
    grid-column-start: $i;
  }

  :host(.#{$prefix}) > ::slotted([col-end='#{$i}']),
  .#{$prefix} > .#{$prefix}-col-end-#{$i} {
    grid-column-end: $i;
  }
}

/* Grid Rows - Base */
@for $i from 1 through $grid-rows {
  :host([rows='#{$i}']),
  .#{$prefix}-rows-#{$i} {
    grid-template-rows: repeat($i, minmax(0, 1fr));
  }

  :host(.#{$prefix}) > ::slotted([row-span='#{$i}']),
  .#{$prefix} > .#{$prefix}-row-span-#{$i} {
    grid-row: span $i / span $i;
  }

  :host(.#{$prefix}) > ::slotted([order='#{$i}']),
  .#{$prefix} > .#{$prefix}-order-#{$i} {
    order: $i;
  }

  :host(.#{$prefix}) > ::slotted([order='-1']),
  .#{$prefix} > .#{$prefix}-order--1 {
    order: -1;
  }
}

/* Grid Columms and Rows - XSmall and up */
@media (min-width: $breakpoint-xs) {
  @for $i from 1 through $grid-cols {
    :host([cols-xs='#{$i}']),
    .#{$prefix}-cols-xs-#{$i} {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.#{$prefix}) > ::slotted([col-span-xs='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-span-xs-#{$i} {
      grid-column: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([col-start-xs='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-start-xs-#{$i} {
      grid-column-start: $i;
    }

    :host(.#{$prefix}) > ::slotted([col-end-xs='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-end-xs-#{$i} {
      grid-column-end: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host([rows-xs='#{$i}']),
    .#{$prefix}-rows-xs-#{$i} {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.#{$prefix}) > ::slotted([row-span-xs='#{$i}']),
    .#{$prefix} > .#{$prefix}-row-span-xs-#{$i} {
      grid-row: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([order-xs='#{$i}']),
    .#{$prefix} > .#{$prefix}-order-xs-#{$i} {
      order: $i;
    }

    :host(.#{$prefix}) > ::slotted([order-xs='-1']),
    .#{$prefix} > .#{$prefix}-order-xs--1 {
      order: -1;
    }
  }
}

/* Grid Columms and Rows - Small and up */
@media (min-width: $breakpoint-sm) {
  @for $i from 1 through $grid-cols {
    :host([cols-sm='#{$i}']),
    .#{$prefix}-cols-sm-#{$i} {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.#{$prefix}) > ::slotted([col-span-sm='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-span-sm-#{$i} {
      grid-column: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([col-start-sm='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-start-sm-#{$i} {
      grid-column-start: $i;
    }

    :host(.#{$prefix}) > ::slotted([col-end-sm='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-end-sm-#{$i} {
      grid-column-end: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host([rows-sm='#{$i}']),
    .#{$prefix}-rows-sm-#{$i} {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.#{$prefix}) > ::slotted([row-span-sm='#{$i}']),
    .#{$prefix} > .#{$prefix}-row-span-sm-#{$i} {
      grid-row: span $i / span $i;
    }


    :host(.#{$prefix}) > ::slotted([order-sm='#{$i}']),
    .#{$prefix} > .#{$prefix}-order-sm-#{$i} {
      order: $i;
    }

    :host(.#{$prefix}) > ::slotted([order-sm='-1']),
    .#{$prefix} > .#{$prefix}-order-sm--1 {
      order: -1;
    }
  }
}

/* Grid Columms and Rows - Medium and up */
@media (min-width: $breakpoint-md) {
  @for $i from 1 through $grid-cols {
    :host([cols-md='#{$i}']),
    .#{$prefix}-cols-md-#{$i} {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.#{$prefix}) > ::slotted([col-span-md='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-span-md-#{$i} {
      grid-column: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([col-start-md='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-start-md-#{$i} {
      grid-column-start: $i;
    }

    :host(.#{$prefix}) > ::slotted([col-end-md='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-end-md-#{$i} {
      grid-column-end: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host([rows-md='#{$i}']),
    .#{$prefix}-rows-md-#{$i} {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.#{$prefix}) > ::slotted([row-span-md='#{$i}']),
    .#{$prefix} > .#{$prefix}-row-span-md-#{$i} {
      grid-row: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([order-md='#{$i}']),
    .#{$prefix} > .#{$prefix}-order-md-#{$i} {
      order: $i;
    }

    :host(.#{$prefix}) > ::slotted([order-md='-1']),
    .#{$prefix} > .#{$prefix}-order-md--1 {
      order: -1;
    }
  }
}

/* Grid Columms and Rows - Large and up */
@media (min-width: $breakpoint-lg) {
  @for $i from 1 through $grid-cols {
    :host([cols-lg='#{$i}']),
    .#{$prefix}-cols-lg-#{$i} {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.#{$prefix}) > ::slotted([col-span-lg='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-span-lg-#{$i} {
      grid-column: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([col-start-lg='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-start-lg-#{$i} {
      grid-column-start: $i;
    }

    :host(.#{$prefix}) > ::slotted([col-end-lg='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-end-lg-#{$i} {
      grid-column-end: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host([rows-lg='#{$i}']),
    .#{$prefix}-rows-lg-#{$i} {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.#{$prefix}) > ::slotted([row-span-lg='#{$i}']),
    .#{$prefix} > .#{$prefix}-row-span-lg-#{$i} {
      grid-row: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([order-lg='#{$i}']),
    .#{$prefix} > .#{$prefix}-order-lg-#{$i} {
      order: $i;
    }

    :host(.#{$prefix}) > ::slotted([order-lg='-1']),
    .#{$prefix} > .#{$prefix}-order-lg--1 {
      order: -1;
    }
  }
}

/* Grid Columms and Rows - XLarge and up */
@media (min-width: $breakpoint-xl) {
  @for $i from 1 through $grid-cols {
    :host([cols-xl='#{$i}']),
    .#{$prefix}-cols-xl-#{$i} {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.#{$prefix}) > ::slotted([col-span-xl='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-span-xl-#{$i} {
      grid-column: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([col-start-xl='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-start-xl-#{$i} {
      grid-column-start: $i;
    }

    :host(.#{$prefix}) > ::slotted([col-end-xl='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-end-xl-#{$i} {
      grid-column-end: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host([rows-xl='#{$i}']),
    .#{$prefix}-rows-xl-#{$i} {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.#{$prefix}) > ::slotted([row-span-xl='#{$i}']),
    .#{$prefix} > .#{$prefix}-row-span-xl-#{$i} {
      grid-row: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([order-xl='#{$i}']),
    .#{$prefix} > .#{$prefix}-order-xl-#{$i} {
      order: $i;
    }

    :host(.#{$prefix}) > ::slotted([order-xl='-1']),
    .#{$prefix} > .#{$prefix}-order-xl--1 {
      order: -1;
    }
  }
}

/* Grid Columms and Rows - XxLarge and up */
@media (min-width: $breakpoint-xxl) {
  @for $i from 1 through $grid-cols {
    :host([cols-xxl='#{$i}']),
    .#{$prefix}-cols-xxl-#{$i} {
      width: 100%;
      grid-template-columns: repeat($i, minmax($min-col-width, $max-col-width));
    }

    :host(.#{$prefix}) > ::slotted([col-span-xxl='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-span-xxl-#{$i} {
      grid-column: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([col-start-xxl='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-start-xxl-#{$i} {
      grid-column-start: $i;
    }

    :host(.#{$prefix}) > ::slotted([col-end-xxl='#{$i}']),
    .#{$prefix} > .#{$prefix}-col-end-xxl-#{$i} {
      grid-column-end: $i;
    }
  }

  @for $i from 1 through $grid-rows {
    :host([rows-xxl='#{$i}']),
    .#{$prefix}-rows-xxl-#{$i} {
      grid-template-rows: repeat($i, minmax(0, 1fr));
    }

    :host(.#{$prefix}) > ::slotted([row-span-xxl='#{$i}']),
    .#{$prefix} > .#{$prefix}-row-span-xxl-#{$i} {
      grid-row: span $i / span $i;
    }

    :host(.#{$prefix}) > ::slotted([order-xxl='#{$i}']),
    .#{$prefix} > .#{$prefix}-order-xxl-#{$i} {
      order: $i;
    }

    :host(.#{$prefix}) > ::slotted([order-xxl='-1']),
    .#{$prefix} > .#{$prefix}-order-xxl--1 {
      order: -1;
    }
  }
}

::slotted([editable]) > ids-button,
.#{$prefix} > .#{$prefix}-cell.editable > ids-button {
  position: absolute;
  top: 0;
  right: 0;
}

::slotted([fill]),
.#{$prefix} > .#{$prefix}-cell.fill {
  background-color: var(--grid-fill-color);
  color: var(--grid-text-color);
}

::slotted([height='auto']),
.#{$prefix} > .#{$prefix}-height-auto {
  height: auto;
}
